{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Header from './Header.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Update',\n  components: {\n    Header\n  },\n  data() {\n    return {\n      employee: {\n        name: \"\",\n        email: \"\",\n        role: \"\",\n        password: \"\"\n      },\n      error: []\n    };\n  },\n  methods: {\n    async updateEmployee() {\n      // console.warn( this.employee)\n      const result = await axios.put(\"http://localhost:3000/usersById/\" + this.$route.params.id, {\n        name: this.employee.name,\n        email: this.employee.email,\n        role: this.employee.role,\n        password: this.employee.password\n      });\n      if (result.status == 200) {\n        this.$router.push({\n          name: 'Home'\n        });\n        alert(\"Employee updated successfully!\");\n      }\n    },\n    sub(e) {\n      alert(\"csdbck\");\n      this.error = [];\n      if (this.name && this.password && this.role && this.email) {\n        console.warn(\"no error\");\n      }\n      if (!this.name) {\n        this.error.push(\"Name\");\n      }\n      if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.email)) {\n        this.error.push(\"invalid email format\");\n      }\n      if (!this.email) {\n        this.error.push(\"Email\");\n      }\n      if (!this.role) {\n        this.error.push(\"Role\");\n      }\n      if (!this.password) {\n        this.error.push(\"Password\");\n      }\n      if (this.error.length != 0) {\n        alert(\"Please enter User \" + this.error);\n      }\n      e.preventDefault();\n    }\n  },\n  async mounted() {\n    let user = localStorage.getItem('user-info');\n    console.warn(this.$route.params.id);\n    const result = await axios.get(\"http://localhost:3000/usersById/\" + this.$route.params.id);\n    console.warn(result.data.name);\n    this.employee = result.data;\n  }\n};","map":{"version":3,"mappings":";AAaA,OAAOA,MAAK,MAAO,cAAa;AAChC,OAAOC,KAAI,MAAO,OAAO;AACzB,eAAc;EACVC,IAAI,EAAC,QAAQ;EACbC,UAAU,EAAC;IACPH;EACJ,CAAC;EACEI,IAAI,GACP;IACI,OAAM;MACFC,QAAQ,EAAC;QACTH,IAAI,EAAC,EAAE;QACPI,KAAK,EAAC,EAAE;QACRC,IAAI,EAAC,EAAE;QACPC,QAAQ,EAAC;MACT,CAAC;MACAC,KAAK,EAAC;IACX;EACJ,CAAC;EAAIC,OAAO,EAAC;IACX,MAAOC,cAAc,GACrB;MACM;MACE,MAAMC,MAAK,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,kCAAkC,GAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAC;QACrFd,IAAI,EAAC,IAAI,CAACG,QAAQ,CAACH,IAAI;QACvBI,KAAK,EAAC,IAAI,CAACD,QAAQ,CAACC,KAAK;QACzBC,IAAI,EAAC,IAAI,CAACF,QAAQ,CAACE,IAAI;QACvBC,QAAQ,EAAC,IAAI,CAACH,QAAQ,CAACG;MAC3B,CAAC,CAAC;MACF,IAAGI,MAAM,CAACK,MAAM,IAAE,GAAG,EACrB;QACI,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;UAACjB,IAAI,EAAC;QAAM,CAAC,CAAC;QAC/BkB,KAAK,CAAC,gCAAgC;MAC3C;IACJ,CAAC;IACAC,GAAG,CAACC,CAAC,EAAC;MACHF,KAAK,CAAC,QAAQ,CAAC;MACjB,IAAI,CAACX,KAAK,GAAC,EAAE;MACb,IAAG,IAAI,CAACP,IAAG,IAAK,IAAI,CAACM,QAAO,IAAK,IAAI,CAACD,IAAG,IAAK,IAAI,CAACD,KAAK,EACxD;QACEiB,OAAO,CAACC,IAAI,CAAC,UAAU;MACzB;MACA,IAAG,CAAC,IAAI,CAACtB,IAAI,EACb;QACE,IAAI,CAACO,KAAK,CAACU,IAAI,CAAC,MAAM,CAAC;MAEzB;MACA,IAAG,CAAE,+CAA+C,CAACM,IAAI,CAAC,IAAI,CAACnB,KAAK,CAAE,EACtE;QACE,IAAI,CAACG,KAAK,CAACU,IAAI,CAAC,sBAAsB,CAAC;MACzC;MAEC,IAAG,CAAC,IAAI,CAACb,KAAK,EACf;QACE,IAAI,CAACG,KAAK,CAACU,IAAI,CAAC,OAAO,CAAC;MAE1B;MACC,IAAG,CAAC,IAAI,CAACZ,IAAI,EACd;QACE,IAAI,CAACE,KAAK,CAACU,IAAI,CAAC,MAAM,CAAC;MAEzB;MACA,IAAG,CAAC,IAAI,CAACX,QAAQ,EACjB;QACE,IAAI,CAACC,KAAK,CAACU,IAAI,CAAC,UAAU,CAAC;MAE7B;MACH,IAAG,IAAI,CAACV,KAAK,CAACiB,MAAM,IAAE,CAAC,EACvB;QAEGN,KAAK,CAAC,oBAAoB,GAAC,IAAI,CAACX,KAAK,CAAC;MAEzC;MACGa,CAAC,CAACK,cAAc,EAAE;IACpB;EAEJ,CAAC;EAED,MAAMC,OAAO,GACb;IACI,IAAIC,IAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW;IAE3CR,OAAO,CAACC,IAAI,CAAC,IAAI,CAACV,MAAM,CAACC,MAAM,CAACC,EAAE;IAClC,MAAMJ,MAAK,GAAG,MAAMX,KAAK,CAAC+B,GAAG,CAAC,kCAAkC,GAAC,IAAI,CAAClB,MAAM,CAACC,MAAM,CAACC,EAAE,CAAC;IACvFO,OAAO,CAACC,IAAI,CAACZ,MAAM,CAACR,IAAI,CAACF,IAAI;IAC7B,IAAI,CAACG,QAAQ,GAACO,MAAM,CAACR,IAAI;EAC5B;AACA","names":["Header","axios","name","components","data","employee","email","role","password","error","methods","updateEmployee","result","put","$route","params","id","status","$router","push","alert","sub","e","console","warn","test","length","preventDefault","mounted","user","localStorage","getItem","get"],"sourceRoot":"","sources":["/home/pranjalisathe/Desktop/resto-project1/src/components/Update.vue"],"sourcesContent":["<template>\n<Header/>\n<h1>Update Page</h1>\n<form @submit=\"sub\" class=\"update\" >\n<input type=\"text\" name=\"name\"  placeholder=\"Enter Name\" v-model=\"employee.name\"/>\n<input type=\"text\" v-model=\"employee.email\" placeholder=\"Enter Email\"/>\n<input type=\"text\" v-model=\"employee.role\" placeholder=\"Enter Role\"/>\n<input type=\"password\" v-model=\"employee.password\" placeholder=\"Enter password\"/>\n\n<button type=\"submit\" v-on:click=\"updateEmployee\">Update Emplaoyee</button>\n</form>\n</template>\n<script>\nimport Header from './Header.vue'\nimport axios from 'axios';\nexport default{\n    name:'Update',\n    components:{\n        Header,\n    },\n       data()\n    {\n        return{\n            employee:{\n            name:\"\",\n            email:\"\",\n            role:\"\",\n            password:\"\"\n            },\n             error:[]\n        }\n    },   methods:{\n      async  updateEmployee()\n      {\n            // console.warn( this.employee)\n              const result =await axios.put(\"http://localhost:3000/usersById/\"+this.$route.params.id,{\n                name:this.employee.name,\n                email:this.employee.email,\n                role:this.employee.role,\n                password:this.employee.password,\n            });\n            if(result.status==200)\n            {\n                this.$router.push({name:'Home'});\n                 alert(\"Employee updated successfully!\")\n            }\n        },\n         sub(e){\n            alert(\"csdbck\");\n          this.error=[];\n          if(this.name && this.password && this.role && this.email)\n          {\n            console.warn(\"no error\")\n          }\n          if(!this.name)\n          {\n            this.error.push(\"Name\");\n\n          }\n          if(!(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.email)))\n          {\n            this.error.push(\"invalid email format\");\n          }\n          \n           if(!this.email)\n          {\n            this.error.push(\"Email\");\n            \n          }\n           if(!this.role)\n          {\n            this.error.push(\"Role\");\n            \n          }\n          if(!this.password)\n          {\n            this.error.push(\"Password\");\n         \n          }\n       if(this.error.length!=0)\n       {\n       \n          alert(\"Please enter User \"+this.error);\n\n       }\n          e.preventDefault();\n        },\n    \n    },\n \n    async mounted()\n    {\n        let user =localStorage.getItem('user-info')\n        \n       console.warn(this.$route.params.id) \n       const result =await axios.get(\"http://localhost:3000/usersById/\"+this.$route.params.id);\n       console.warn(result.data.name)\n       this.employee=result.data;\n    }\n    }\n\n</script>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}